// MongoDB Schema - For flexible and unstructured data
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/mongo-client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

// ========================================
// FLEXIBLE MODELS (MongoDB)
// ========================================

model UserProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique // Reference to PostgreSQL User
  bio         String?
  state       String?
  address     String?
  city        String?
  country     String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  socialLinks Json?    // { twitter, linkedin, github, etc }
  preferences Json?    // User flexible preferences
  metadata    Json?    // Any additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_profiles")
}

model UserActivity {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   // Reference to PostgreSQL User
  action     String   // login, logout, view_course, complete_lesson, etc
  resource   String?  // Affected resource
  resourceId String?  // Resource ID
  metadata   Json?    // Additional activity information
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@map("user_activities")
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model UserSetting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   // Reference to PostgreSQL User
  settings  Json     // All user settings in JSON format
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@map("user_settings")
}

model LessonContent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  lessonId    String   @unique // Reference to PostgreSQL Lesson
  content     Json     // Flexible course content (markdown, HTML, blocks, etc)
  resources   Json?    // { videos: [], audios: [], documents: [] }
  exercises   Json?    // Interactive exercises
  attachments Json?    // File attachments
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lesson_contents")
}

model LessonProgress {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   // Reference to PostgreSQL User
  lessonId        String   // Reference to PostgreSQL Lesson
  enrollmentId    String   // Reference to PostgreSQL Enrollment
  completedSteps  Json?    // { step1: true, step2: false, ... }
  quizResults     Json?    // Quiz results
  timeSpent       Int?     // Time in seconds
  lastPosition    String?  // Last position in content
  notes           String?  // Student notes
  isCompleted     Boolean  @default(false)
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("lesson_progress")
  @@index([userId])
  @@index([lessonId])
  @@index([enrollmentId])
}

model ChatMessage {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId     String   // User ID
  receiverId   String?  // User ID (null for group messages)
  roomId       String?  // For group or course chats
  message      String
  messageType  String   @default("text") // text, image, audio, video, file
  attachments  Json?    // File attachment URLs
  isRead       Boolean  @default(false)
  readAt       DateTime?
  metadata     Json?    // Additional information
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("chat_messages")
  @@index([senderId])
  @@index([receiverId])
  @@index([roomId])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   // Recipient
  type      String   // new_message, course_update, achievement, etc
  title     String
  message   String
  data      Json?    // Additional notification data
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())

  @@map("notifications")
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  type        String   // course_completion, streak, perfect_score, etc
  title       String
  description String?
  icon        String?
  points      Int?
  metadata    Json?    // Additional achievement information
  earnedAt    DateTime @default(now())

  @@map("achievements")
  @@index([userId])
  @@index([type])
  @@index([earnedAt])
}

model AuditLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?  // User who performed the action
  action     String   // create, update, delete, login, etc
  entity     String   // User, Course, Lesson, etc
  entityId   String?  // ID of affected entity
  changes    Json?    // Changes made (before/after)
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  timestamp  DateTime @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([timestamp])
}

model ErrorLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?
  errorType  String
  message    String
  stack      String?
  context    Json?    // Request, params, body, etc
  severity   String   @default("error") // error, warning, critical
  isResolved Boolean  @default(false)
  resolvedAt DateTime?
  timestamp  DateTime @default(now())

  @@map("error_logs")
  @@index([userId])
  @@index([errorType])
  @@index([severity])
  @@index([timestamp])
}

